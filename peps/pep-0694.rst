PEP: 694
Title: Upload 2.0 API for Python Package Indexes
Author: Barry Warsaw <barry@python.org>, Donald Stufft <donald@stufft.io>, Ee Durbin <ee@python.org>
Discussions-To: https://discuss.python.org/t/pep-694-upload-2-0-api-for-python-package-repositories/16879
Status: Draft
Type: Standards Track
Topic: Packaging
Created: 11-Jun-2022
Post-History: `27-Jun-2022 <https://discuss.python.org/t/pep-694-upload-2-0-api-for-python-package-repositories/16879>`__,
              `06-Jan-2025 <https://discuss.python.org/t/pep-694-pypi-upload-api-2-0/76316>`__
              `14-Apr-2025 <https://discuss.python.org/t/pep-694-pypi-upload-api-2-0/76316/9>`__


Abstract
========

This PEP proposes a standard API for uploading files to a Python package index such as PyPI.  Along
with standardization, the upload API provides additional useful features such as support for:

* an upload session, which can be used to simultaneously publish all wheels in a package release;

* "staging" a release, which can be used to test uploads before publicly publishing them, without the
  need for `test.pypi.org <https://test.pypi.org/>`__;

* artifacts which can be overwritten and replaced, until a session is published;

* flexible file upload mechanisms for index operators;

* detailed status on the state of artifact uploads;

* new project creation without requiring the uploading of an artifact.

Once this new upload API is adopted, the existing legacy API can be deprecated, however this PEP
does not propose a deprecation schedule for the legacy API.


Rationale
=========

There is currently no standardized API for uploading files to a Python package index such as
PyPI. Instead, everyone has been forced to reverse engineer the existing `"legacy"
<https://docs.pypi.org/api/upload/>`__ API.

The legacy API, while functional, leaks implementation details of the original PyPI code base,
which has been faithfully replicated in the new code base and alternative implementations.

In addition, there are a number of major issues with the legacy API:

* It is fully synchronous, which forces requests to be held open both for the upload itself, and
  while the index processes the uploaded file to determine success or failure.

* It does not support any mechanism for parallelizing or resuming an upload. With the largest
  default file size on PyPI being around 1GB in size, requiring the entire upload to complete
  successfully means bandwidth is wasted when such uploads experience a network interruption while
  the request is in progress.

* The atomic unit of operation is a single file.  This is problematic when a release logically
  includes an sdist and multiple binary wheels, leading to race conditions where consumers get
  different versions of the package if they are unlucky enough to require a package before their
  platform's wheel has completely uploaded. If the release uploads its sdist first, this may also
  manifest in some consumers seeing only the sdist, triggering a local build from source.

* Status reporting is very limited.  There's no support for reporting multiple errors, warnings,
  deprecations, etc.  Status is limited to the HTTP status code and reason phrase, of which the
  reason phrase has been deprecated since HTTP/2 (:rfc:`RFC 7540 <7540#section-8.1.2.4>`).

* Metadata for a release is submitted alongside the file. However, as this metadata is famously
  unreliable, most installers instead choose to download the entire file and read the metadata from
  there.

* There is no mechanism for allowing an index to do any sort of sanity checks before bandwidth gets
  expended on an upload.  Many cases of invalid metadata or incorrect permissions could be checked
  prior to uploading files.

* There is no support for "staging" a release prior to publishing it to the index.

* Creation of new projects requires the uploading of at least one file, leading to "stub" uploads
  to claim a project namespace.

The new upload API proposed in this PEP provides a solution to all of these problems,
providing for a much more flexible approach, with support for servers to
implement resumable and parallel uploads via mechanisms,
better error reporting, better release testing experience,
and atomic and simultaneous publishing of all release artifacts.


Legacy API
==========

The following is an overview of the legacy API.  For the detailed description, consult the
`PyPI user guide documentation <https://docs.pypi.org/api/upload/>`__.


Endpoint
--------

The existing upload API lives at a base URL.  For PyPI, that URL is currently
``https://upload.pypi.org/legacy/``.  Clients performing uploads specify the API they want to call
by adding an ``:action`` URL parameter with a value of ``file_upload``. [#fn-action]_

The legacy API also has a ``protocol_version`` parameter, in theory allowing new versions of the API
to be defined.  In practice this has never happened, and the value is always ``1``.

Thus, the effective upload API on PyPI is:
``https://upload.pypi.org/legacy/?:action=file_upload&protocol_version=1``.


Encoding
--------

The data to be submitted is submitted as a ``POST`` request with the content type of
``multipart/form-data``.  This reflects the legacy API's historical nature, which was originally
designed not as an API, but rather as a web form on the initial PyPI implementation, with client code
written to programmatically submit that form.


Content
-------

Roughly speaking, the metadata contained within the package is submitted as parts where the content
disposition is ``form-data``, and the metadata key is the name of the field. The names of these
various pieces of metadata are not documented, and they sometimes, but not always match the names
used in the ``METADATA`` files for package artifacts. The case rarely matches, and the ``form-data``
to ``METADATA`` conversion is inconsistent.

The upload artifact file itself is sent as a ``application/octet-stream`` part with the name of
``content``, and if there is a PGP signature attached, then it will be included as a
``application/octet-stream`` part with the name of ``gpg_signature``.


Authentication
--------------

Upload authentication is also not standardized. On PyPI, authentication is through `API tokens
<https://pypi.org/help/>`__ or `Trusted Publisher (OpenID Connect)
<https://docs.pypi.org/trusted-publishers/>`__.  Other indexes may support different authentication
methods.

.. _spec:

Upload 2.0 API Specification
============================

This PEP traces the root cause of most of the issues with the existing API to be roughly two things:

- The metadata is submitted alongside the file, rather than being parsed from the
  file itself. [#fn-metadata]_

- It supports only a single request, using only form data, that either succeeds or fails, and all
  actions are atomic within that single request.

To address these issues, this PEP proposes a multi-request workflow, which at a high level involves
these steps:

#. Initiate an upload session, creating a release stage.
#. Initiate file-upload session(s) to that stage as part of the upload session.
#. Execute file upload mechanism for the file-upload session(s).
#. Complete the file-upload session(s), marking them as executed or canceled.
#. Complete the upload session, publishing or discarding the stage.
#. Optionally check the status of an upload session.


Versioning
----------

This PEP uses the same ``MAJOR.MINOR`` versioning system as used in :pep:`691`, but it is otherwise
independently versioned. The legacy API is considered by this PEP to be version ``1.0``, but this
PEP does not modify the legacy API in any way.

The API proposed in this PEP therefor has the version number ``2.0``.


Root Endpoint
-------------

All URLs described here are relative to the "root endpoint", which may be located anywhere within
the url structure of a domain. For example, the root endpoint could be
``https://upload.example.com/``, or ``https://example.com/upload/``.

.. _session-create:

Create an Upload Session
~~~~~~~~~~~~~~~~~~~~~~~~

A release starts by creating a new upload session.  To create the session, a client submits a
``POST`` request to the root URL like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "name": "foo",
      "version": "1.0",
      "nonce": "<string>"
    }


The request includes the following top-level keys:

``meta`` (**required**)
    Describes information about the payload itself.  Currently, the only defined sub-key is
    ``api-version`` the value of which must be the string ``"2.0"``.

``name`` (**required**)
    The name of the project that this session is attempting to release a new version of.

``version`` (**required**)
    The version of the project that this session is attempting to add files to.

``nonce`` (**optional**)
    An additional client-side string input to the :ref:`"session token" <session-token>`
    algorithm.  Details are provided below, but if this key is omitted, it is equivalent
    to passing the empty string.

Upon successful session creation, the server returns a ``201 Created`` response.  If an error
occurs, the appropriate ``4xx`` code will be returned, as described in the :ref:`session-errors`
section.

If a session is created for a project which has no previous release, then the index **MAY** reserve
the project name before the session is published, however it **MUST NOT** be possible to navigate to
that project using the "regular" (i.e. :ref:`unstaged <staged-preview>`) access protocols, *until*
the stage is published.  If this first-release stage gets canceled, then the index **SHOULD** delete
the project record, as if it were never uploaded.

The session is owned by the user that created it, and all subsequent requests **MUST** be performed
with the same credentials, otherwise a ``403 Forbidden`` will be returned on those subsequent
requests.


.. _session-response:

Response Body
+++++++++++++

The successful response includes the following content:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "links": {
        "stage": "...",
        "upload": "...",
        "session": "...",
      },
      "mechanisms": ["http-post-application-octet-stream"],
      "session-token": "<token-string>",
      "valid-for": 604800,
      "status": "pending",
      "files": {},
      "notices": [
        "a notice to display to the user"
      ]
    }


Besides the ``meta`` key, which has the same format as the request JSON, the success response has
the following keys:

``links``
    A dictionary mapping :ref:`keys to URLs <session-links>` related to this session, the details of
    which are provided below.

``mechanisms``
    A list of file-upload mechanisms supported by the server.

``session-token``
    If the index supports :ref:`previewing staged releases <staged-preview>`, this key will contain
    the unique :ref:`"session token" <session-token>` that can be provided to installers in order to
    preview the staged release before it's published.  If the index does *not* support stage
    previewing, this key **MUST** be omitted.

``valid-for``
    An integer representing how long, in seconds, until the server itself will expire this session,
    and thus all of its content, including any uploaded files and the URL links related to the
    session. This value is roughly relative to the time at which the session was created or
    :ref:`extended <session-extension>`.  The session **SHOULD** live at least this much longer
    unless the client itself has canceled or published the session. Servers **MAY** choose to
    *increase* this time, but should never *decrease* it, except naturally through the passage of
    time.  Clients can query the :ref:`session status <session-status>` to get time remaining in the
    session.

``status``
    A string that contains one of ``pending``, ``published``, ``error``, or ``canceled``,
    representing the overall :ref:`status of the session <session-status>`.

``files``
    A mapping containing the filenames that have been uploaded to this session, to a mapping
    containing details about each :ref:`file referenced in this session <session-files>`.

``notices``
    An optional key that points to an array of human-readable informational notices that the server
    wishes to communicate to the end user.  These notices are specific to the overall session, not
    to any particular file in the session.


.. _session-links:

Session Links
+++++++++++++

For the ``links`` key in the success JSON, the following sub-keys are valid:

``upload``
    The endpoint session clients will use to initiate a :ref:`file-upload session <file-uploads>`
    for each file to be included in this session.

``stage``
    The endpoint where this staged release can be :ref:`previewed <staged-preview>` prior to
    publishing the session.  This can be used to download and verify the not-yet-public files.  If
    the index does not support previewing staged releases, this key **MUST** be omitted.

``session``
    The endpoint where actions for this session can be performed, including :ref:`publishing this
    session <publish-session>`, :ref:`canceling and discarding the session <session-cancellation>`,
    :ref:`querying the current session status <session-status>`, and :ref:`requesting an extension
    of the session lifetime <session-extension>` (*if* the server supports it).


.. _session-files:

Session Files
+++++++++++++

The ``files`` key contains a mapping from the names of the files uploaded in this session to a
sub-mapping with the following keys:

``status``
    A string with valid values ``pending``, ``processing``, ``complete``, ``error``, and ``canceled``.
    If there was an error during upload, then clients should not assume the file is in any usable
    state, ``error`` will be returned and it's best to :ref:`cancel or delete <file-upload-session-cancelation>`
    the file and start over.  This action would remove the file name from the ``files`` key of the
    :ref:`session status response body <session-response>`.

``link``
    The *absolute* URL that the client should use to reference this specific file.  This URL is used
    to retrieve, replace, or delete the :ref:`referenced file <file-uploads>`.  If a ``nonce`` was
    provided, this URL **MUST** be obfuscated with a non-guessable token as described in the
    :ref:`session token <session-token>` section.

``notices``
    An optional key with similar format and semantics as the ``notices`` session key, except that
    these notices are specific to the referenced file.

If a second session is created for the same name-version pair while a session for that pair is in
the ``pending`` state, then the server **MUST** return the JSON status response for the already
existing session, along with the ``200 Ok`` status code rather than creating a new, empty session.


.. _file-uploads:

File Upload
~~~~~~~~~~~

After creating the session, the ``upload`` endpoint from the response's :ref:`session links
<session-links>` mapping is used to begin the upload of new files into that session.  Clients
**MUST** use the provided ``upload`` URL and **MUST NOT** assume there is any pattern or commonality
to those URLs from one session to the next.

To initiate a file upload, a client first sends a ``POST`` request to the ``upload`` URL.  The
request looks like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "filename": "foo-1.0.tar.gz",
      "size": 1000,
      "hashes": {"sha256": "...", "blake2b": "..."},
      "metadata": "...",
      "mechanism": "http-post-application-octet-stream"
    }


Besides the standard ``meta`` key, the request JSON has the following additional keys:

``filename`` (**required**)
    The name of the file being uploaded.

``size`` (**required**)
    The size in bytes of the file being uploaded.

``hashes`` (**required**)
    A mapping of hash names to hex-encoded digests.  Each of these digests are the checksums of the
    file being uploaded when hashed by the algorithm identified in the name.

    By default, any hash algorithm available in `hashlib
    <https://docs.python.org/3/library/hashlib.html>`_ can be used as a key for the hashes
    dictionary [#fn-hash]_. At least one secure algorithm from ``hashlib.algorithms_guaranteed``
    **MUST** always be included. This PEP specifically recommends ``sha256``.

    Multiple hashes may be passed at a time, but all hashes provided **MUST** be valid for the file.

``mechanism`` (**required**)
    The file-upload mechanisms the client intends to use for this file.
    This mechanism **SHOULD** be chosen from the list of mechanisms advertised in the `session response body
    <session-response>`_.
    A client **MAY** send a mechanism that is not advertised in cases where server operators have
    documented a new or up-coming mechanism that is available for use on a "pre-release" basis.

``metadata`` (**optional**)
    If given, this is a string value containing the file's `core metadata
    <https://packaging.python.org/en/latest/specifications/core-metadata/>`_.

Servers **MAY** use the data provided in this request to do some sanity checking prior to allowing
the file to be uploaded.  These checks may include, but are not limited to:

- checking if the ``filename`` already exists in a published release;

- checking if the ``size`` would exceed any project or file quota;

- checking if the contents of the ``metadata``, if provided, are valid.

If the server determines that upload should proceed, it will return a ``202 Accepted`` response, with
the response body below. The :ref:`status <session-status>` of the session will also include the filename in the ``files`` mapping. If the server determines the upload cannot proceed, it **MUST** return
a ``409 Conflict``.  The server **MAY** allow parallel uploads of files, but is not required to.
If the server cannot proceed with an upload because the ``mechanism`` supplied by the client is not supported
it **MUST** return a ``422 Unprocessable Entity``.

.. _file-upload-session-response:

File Upload Session Response Body
+++++++++++++++++++++++++++++++++

The successful response includes the following:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "links": {
        "session": "...",
        "file-upload-session": "..."
      },
      "status": "pending",
      "valid-for": 3600,
      "mechanism": {
        "http-post-application-octet-stream": {
          "file_url": "..."
          "attestations_url": "..."
        },
        ...
      }
    }


Besides the ``meta`` key, which has the same format as the request JSON, the success response has
the following keys:

``links``
    A dictionary mapping :ref:`keys to URLs <file-upload-session-links>` related to this session,
    the details of which are provided below.

``mechanism``
    A mapping containing the supported mechanism identifier negotiated by the client and server,
    to a mapping containing details necessary to execute the mechanism.

.. _file-upload-session-links:

Session Links
+++++++++++++

For the ``links`` key in the success JSON, the following sub-keys are valid:

``session``
    The endpoint where actions for the parent session can be performed.

``file-upload-session``
    The endpoint where actions for this file-upload-session can be performed.
    including :ref:`canceling and discarding the file upload session <file-upload-session-cancelation>`,
    :ref:`querying the current file upload session status <session-status>`,
    and :ref:`requesting an extension of the file upload session lifetime <session-extension>`
    (*if* the server supports it).

.. _file-upload-session-completion:

File Upload Session Completion
++++++++++++++++++++++++++++++

To complete a file upload session, which indicates that the file upload mechanism has been executed
and did not produce an error, a client issues a ``POST`` to the ``file-upload-session`` link in the
file upload session creation response body.

The requests looks like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "action": "complete",
    }


After receiving this requests the server **MAY** perform additional asynchronous processing on the file,
for instance to verify its hashes or contents.
If the processing is required to complete before an upload session can be published,
the status of the file upload session can be set to ``processing`` until such processing is complete,
reaches an error state, or the file upload session is canceled.


.. _file-upload-session-cancelation:

Canceling and Deleting File Uploads
+++++++++++++++++++++++++++++++++++

A client can cancel an in-progress upload session for a file, or delete a file that has been
completely uploaded.  In both cases, the client performs this by issuing a ``DELETE`` request to
the file upload session URL of the file they want to delete.

A successful deletion request **MUST** response with a ``204 No Content``.

Once canceled or deleted, a client **MUST NOT** assume that the previous file upload session resource
or associated file upload mechanisms can be reused.


Replacing a Partially or Fully Uploaded File
++++++++++++++++++++++++++++++++++++++++++++

To replace a session file, the file upload **MUST** have been previously completed, canceled, or
deleted.  It is not possible to replace a file if the upload for that file is in-progress.

To replace a session file, clients should :ref:`cancel and delete the in-progress upload
<file-upload-session-cancelation>` by issuing a ``DELETE`` to the upload resource URL for the file they want to
replace.  After this, the new file upload can be initiated by beginning the entire :ref:`file upload
<file-uploads>` sequence over again.  This means providing the metadata request again to retrieve a
new upload resource URL.  Client **MUST NOT** assume that the previous upload resource URL can be
reused after deletion.


.. _session-status:

Session Status
~~~~~~~~~~~~~~

At any time, a client can query the status of a session by issuing a ``GET`` request to the
``session`` :ref:`link <session-links>` or ``file-upload-session`` :ref:`link <file-upload-session-links>`
given in the :ref:`session creation response body <session-response>`
or :ref:`file upload session creation response body <file-upload-session-response>`,
respectively.

The server will respond to this ``GET`` request with the same :ref:`session response <session-response>`
or :ref:`file upload session creation response body <file-upload-session-response>`,
that they got when they initially created the upload session or file upload session,
except with any changes to ``status``, ``valid-for``, or ``files`` reflected.


.. _session-extension:

Session Extension
~~~~~~~~~~~~~~~~~

Servers **MAY** allow clients to extend sessions, but the overall lifetime and number of extensions
allowed is left to the server.  To extend a session, a client issues a ``POST`` request to the
``session`` :ref:`link <session-links>` or ``file-upload-session`` :ref:`link <file-upload-session-links>`
given in the :ref:`session creation response body <session-response>`
or :ref:`file upload session creation response body <file-upload-session-response>`, respectively.

The request looks like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "action": "extend",
      "extend-for": 3600
    }

The number of seconds specified is just a suggestion to the server for the number of additional
seconds to extend the current session.  For example, if the client wants to extend the current
session for another hour, ``extend-for`` would be ``3600``.  Upon successful extension, the server
will respond with the same :ref:`response <session-response>` that they got when they initially
created the upload session, except with any changes to ``status``, ``valid-for``, or ``files``
reflected.

If the server refuses to extend the session for the requested number of seconds, it still returns a
success response, and the ``valid-for`` key will simply include the number of seconds remaining in
the current session.


.. _session-cancellation:

Session Cancellation
~~~~~~~~~~~~~~~~~~~~

To cancel an entire session, a client issues a ``DELETE`` request to the ``session`` :ref:`link
<session-links>` given in the :ref:`session creation response body <session-response>`.  The server
then marks the session as canceled, and **SHOULD** purge any data that was uploaded as part of that
session.  Future attempts to access that session URL or any of the upload session URLs **MUST**
return a ``404 Not Found``.

To prevent dangling sessions, servers may also choose to cancel timed-out sessions on their own
accord. It is recommended that servers expunge their sessions after no less than a week, but each
server may choose their own schedule.  Servers **MAY** support client-directed :ref:`session
extensions <session-extension>`.


.. _publish-session:

Session Completion
~~~~~~~~~~~~~~~~~~

To complete a session and publish the files that have been included in it, a client issues a
``POST`` request to the ``session`` :ref:`link <session-links>` given in the :ref:`session creation
response body <session-response>`.

The request looks like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "action": "publish",
    }


If the server is able to immediately complete the file upload session, it may do so and return a
``201 Created`` response. If it is unable to immediately complete the file upload session
(for instance, if it needs to do validation that may take longer than reasonable in a single HTTP
request), then it may return a ``202 Accepted`` response.

In either case, the server should include a ``Location`` header pointing back to the file upload
session status URL, and if the server returned a ``202 Accepted``, the client may poll that URL to
watch for the status to change.

If an error occurs, the appropriate ``4xx`` code should be returned, as described in the
:ref:`session-errors` section.


.. _session-token:

Session Token
~~~~~~~~~~~~~

When creating a session, clients can provide a ``nonce`` in the :ref:`initial session creation
request <session-create>` .  This nonce is a string with arbitrary content.  The ``nonce`` is
optional, and if omitted, is equivalent to providing an empty string.

In order to support previewing of staged uploads, the package ``name`` and ``version``, along with
this ``nonce`` are used as input into a hashing algorithm to produce a unique "session token".  This
session token is valid for the life of the session (i.e., until it is completed, either by
cancellation or publishing), and can be provided to supporting installers to gain access to the
staged release.

The use of the ``nonce`` allows clients to decide whether they want to obscure the visibility of
their staged releases or not, and there can be good reasons for either choice.  For example, if a CI
system wants to upload some wheels for a new release, and wants to allow independent validation of a
stage before it's published, the client may opt for not including a nonce.  On the other hand, if a
client would like to pre-seed a release which it publishes atomically at the time of a public
announcement, that client will likely opt for providing a nonce.

The `SHA256 algorithm <https://docs.python.org/3/library/hashlib.html#hashlib.sha256>`_ is used to
turn these inputs into a unique token, in the order ``name``, ``version``, ``nonce``, using the
following Python code as an example:

.. code-block:: python

    from hashlib import sha256

    def gentoken(name: bytes, version: bytes, nonce: bytes = b''):
        h = sha256()
        h.update(name)
        h.update(version)
        h.update(nonce)
        return h.hexdigest()

It should be evident that if no ``nonce`` is provided in the :ref:`session creation request
<session-create>`, then the preview token is easily guessable from the package name and version
number alone.  Clients can elect to omit the ``nonce`` (or set it to the empty string themselves) if
they want to allow previewing from anybody without access to the preview token.  By providing a
non-empty ``nonce``, clients can elect for security-through-obscurity, but this does not protect
staged files behind any kind of authentication.


.. _staged-preview:

Stage Previews
~~~~~~~~~~~~~~

The ability to preview staged releases before they are published is an important feature of this
PEP, enabling an additional level of last-mile testing before the release is available to the
public.  Indexes **MAY** provide this functionality through the URL provided in the ``stage``
sub-key of the :ref:`links key <session-links>` returned when the session is created.  The ``stage``
URL can be passed to installers such as ``pip`` by setting the `--extra-index-url
<https://pip.pypa.io/en/stable/cli/pip_install/#cmdoption-extra-index-url>`__ flag to this value.
Multiple stages can even be previewed by repeating this flag with multiple values.

In either case, the index will return views that expose the staged releases to the installer tool,
making them available to download and install into virtual environments built for that last-mile
testing.  The former option allows for existing installers to preview staged releases with no
changes, although perhaps in a less user-friendly way.  The latter option can be a better user
experience, but the details of this are left to installer tool maintainers.


.. _session-errors:

Errors
------

All error responses that contain content look like:

.. code-block:: text

    Content-Type: application/vnd.pypi.upload.v2+json

    {
      "meta": {
        "api-version": "2.0"
      },
      "message": "...",
      "errors": [
        {
          "source": "...",
          "message": "..."
        }
      ]
    }

Besides the standard ``meta`` key, this has the following top level keys:

``message``
    A singular message that encapsulates all errors that may have happened on this
    request.

``errors``
    An array of specific errors, each of which contains a ``source`` key, which is a string that
    indicates what the source of the error is, and a ``message`` key for that specific error.

The ``message`` and ``source`` strings do not have any specific meaning, and are intended for human
interpretation to aid in diagnosing underlying issue.

File Upload Mechanisms
----------------------

File Upload Mechanisms, with the exception of ``http-post-application-octet-stream`` are left as an
implementation detail specific to each server. Servers **MUST** implement a
``http-post-application-octet-stream`` mechanism. This serves as a fallback if no server specific implementations
exist.

A given server may implement an arbitrary number of mechanisms and is responsible for documenting
their usage. Implemenatations **SHOULD** be prefixed with a string that clearly identifies the
server and is unique from other well known servers or implementations.

If a server intendes to match the behavior of another server's implementation, it **MAY** respond
with that implementation's file upload mechanism name.

All implementations of this PEP **MUST** implement the ``http-post-application-octet-stream`` file
upload mechanism.

``http-post-application-octet-stream`` Mechanism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``http-post-application-octet-stream`` mechansism **MUST** be supported servers which
implement this PEP.

A client executes this mechanism by submitting a ``POST`` request to the ``file_url`` returned in the
``http-post-application-octet-stream`` map of the ``mechanism`` map of the
:ref:`file upload session creation response body <file-upload-session-response>` like:

.. code-block:: text

    Content-Type: application/octet-stream

    <binary contents of the file to upload>

Servers **MAY** support uploading of digital attestations for files (see :pep:`740`).
This support will be indicated by inclusion of an ``attestations_url`` key in the
``http-post-application-octet-stream`` map of the ``mechanism`` map of the
:ref:`file upload session creation response body <file-upload-session-response>`.
Attestations **MUST** be uploaded to the ``attestations_url`` before
:ref:`file upload session completion <file-upload-session-completion>`.

To upload an attestation, a client submits a ``POST`` request to the ``attestations_url``
containing a JSON array of :pep:`attestation objects <740#attestation-objects>` like:

.. code-block:: text

    Content-Type: application/json

    [{"version": 1, "verification_material": {...}, "envelope": {...}},...]


Content Types
-------------

Like :pep:`691`, this PEP proposes that all requests and responses from this upload API will have a
standard content type that describes what the content is, what version of the API it represents, and
what serialization format has been used.

This standard request content type applies to all requests *except* for requests to execute
a File Upload Mechanism, which will be specified by the documentation for that mechanism.

The structure of the ``Content-Type`` header for all other requests is:

.. code-block:: text

    application/vnd.pypi.upload.$version+$format

Since minor API version differences should never be disruptive, only the major version is included
in the content type; the version number is prefixed with a ``v``.

The minor API version specified in the ``.meta.api-version`` JSON key of client requests
**MUST** match the ``Content-Type`` header for major version.

Unlike :pep:`691`, this PEP does not change the existing *legacy* ``1.0`` upload API in any way, so
servers are required to host the new API described in this PEP at a different endpoint than the
existing upload API.

Since JSON is the only defined request format defined in this PEP, all non-file-upload requests
defined in this PEP **MUST** include a ``Content-Type`` header value of:

- ``application/vnd.pypi.upload.v2+json``.

Similar to :pep:`691`, this PEP also standardizes on using server-driven content negotiation to
allow clients to request different versions or serialization formats, which includes the ``format``
part of the content type.  However, since this PEP expects the existing legacy ``1.0`` upload API to
exist at a different endpoint, and this PEP currently only provides for JSON serialization, this
mechanism is not particularly useful.  Clients only have a single version and serialization they can
request. However clients **SHOULD** be prepared to handle content negotiation gracefully in the case
that additional formats or versions are added in the future.


FAQ
===

Does this mean PyPI is planning to drop support for the existing upload API?
----------------------------------------------------------------------------

At this time PyPI does not have any specific plans to drop support for the existing upload API.

Unlike with :pep:`691` there are significant benefits to doing so, so it is likely that support for
the legacy upload API to be (responsibly) deprecated and removed at some point in the future.  Such
future deprecation planning is explicitly out of scope for *this* PEP.


Can I use the upload 2.0 API to reserve a project name?
-------------------------------------------------------

Yes!  If you're not ready to upload files to make a release, you can still reserve a project
name (assuming of course that the name doesn't already exist).

To do this, :ref:`create a new session <session-create>`, then :ref:`publish the session
<publish-session>` without uploading any files.  While the ``version`` key is required in the JSON
body of the create session request, you can simply use the placeholder version number ``"0.0.0"``.

The user that created the session will become the owner of the new project.


Open Questions
==============

Defer Stage Previews
--------------------

:ref:`Stage previews <staged-preview>` are an important and useful feature for testing new version
wheel uploads before they are published.  They'd allow us to effectively decommission
``test.pypi.org``, which has well-known deficiencies.

However, the ability to preview stages before they're published does complicate the protocol and
this proposal.  We could defer this feature for later, although if we do, we should still keep the
optional ``nonce`` for token generation, in order to be easily future proof.

.. rubric:: Footnotes

.. [#fn-action] Obsolete ``:action`` values ``submit``, ``submit_pkg_info``, and ``doc_upload`` are
                no longer supported


.. [#fn-metadata] This would be fine if used as a pre-check, but the parallel metadata should be
                  validated against the actual ``METADATA`` or similar files within the
                  distribution.

.. [#fn-hash] Specifically any hash algorithm name that `can be passed to
              <https://docs.python.org/3/library/hashlib.html#hashlib.new>`_ ``hashlib.new()`` and
              which does not require additional parameters.

.. [#fn-immutable] Published files may still be yanked (i.e. :pep:`592`) or `deleted
                   <https://pypi.org/help/#file-name-reuse>`__ as normal.


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.
